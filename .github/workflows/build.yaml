name: Build Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      packages: write
      contents: read
      security-events: write
    env:
      IMAGE_NAME: qbittorrent-distroless
      FULCIO_URL: "https://fulcio.sigstore.dev"
      REKOR_URL: "https://rekor.sigstore.dev"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

    - name: Set up Cosign
      uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1

    - name: Set up crane
      uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # v0.4
    
    - name: Setup Node
      uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
      with:
        node-version: 22.x

    - name: Install Semver
      run: npm install semver

    - name: Extract Version
      id: extract-version
      shell: bash
      run: |
        echo "VERSION=$(grep -oP '(?<=ARG VERSION=)[^ ]+' Dockerfile)" >> $GITHUB_ENV

    - name: Log in to GitHub Container Registry (GHCR)
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ghcr.io
        
    - name: Build and Push Docker Image
      uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
      id: build
      with:
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          org.opencontainers.image.version=${{ env.VERSION }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.vendor=${{ github.repository_owner }}
        platforms: linux/amd64
        file: Dockerfile
        context: .
        provenance: false
        sbom: false
        outputs: |
          type=docker
          ${{ format('type=image,name=ghcr.io/{0}/{1},push-by-digest=true,name-canonical=true,push=true', github.repository_owner, env.IMAGE_NAME) }}

    - name: Determine Definitive Version
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: version
      with:
        script: |
          const semver = require('semver');
    
          function extractVersionFromTag(tag) {
            const versionRegex = /(\d+\.\d+\.\d+)/;
            const match = tag.match(versionRegex);
            return match ? match[0] : null;
          }
    
          function sanitizeInputVersion(version) {
            return version.split('-')[0]; // Remove any pre-release suffixes
          }
    
          const tag = '${{ env.VERSION }}'; // Input tag (e.g., "release-5.0.4_v2.0.11")
          const extractedVersion = extractVersionFromTag(tag); // Extract "5.0.4"
          const validSemverRegex = /^v?(\d+(\.\d+)?(\.\d+)?)/;
          const date = new Date();
    
          const parsedVersion = validSemverRegex.exec(extractedVersion);
          const validSemver = parsedVersion !== null;
    
          const parsedSemver = validSemver ? semver.coerce(parsedVersion[0]) : null;
    
          const outputVersion = validSemver
            ? `${parsedSemver.major}.${parsedSemver.minor}.${parsedSemver.patch}` // Use the extracted version
            : `${date.getFullYear()}.${date.getMonth() + 1}.${date.getDate()}`; // Fallback to date-based version
    
          const sanitizedInputVersion = validSemver ? sanitizeInputVersion(extractedVersion) : tag;
    
          core.setOutput('version', outputVersion);
          core.setOutput('validSemver', validSemver);
          core.setOutput('sanitizedInputVersion', sanitizedInputVersion);

    - name: Build Meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
      id: meta
      with:
        flavor: latest=false
        images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.validSemver }}
          type=semver,pattern={{major}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.validSemver }}
          type=raw,value=${{ steps.version.outputs.sanitizedInputVersion }},enable=${{ steps.version.outputs.validSemver }}
          type=raw,value=rolling
    
    - name: Push Images
      uses: Noelware/docker-manifest-action@b33ab348026b120a895167160f5605b0197f0862 # 0.4.3
      id: push
      with:
        inputs: ${{ join(fromJSON(steps.meta.outputs.json).tags, ',') }}
        images: >-
          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }},
        push: true

    - name: Export index digest
      id: digest
      run: |
        digest=$(echo "${{ steps.push.outputs.images }}" | grep -oP 'sha256:[^, ]+' | head -n1)
        echo "digest=${digest}" >> $GITHUB_OUTPUT

    - name: Extract the digests for each architecture
      id: extract
      shell: bash
      run: |
        output="digest-index=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}"
        echo "Adding GitHub step output: ${output}"
        echo "${output}" >> $GITHUB_OUTPUT
        output="shortdigest-index=$(echo "ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}" | cut -d@ -f 2)"
        echo "Adding GitHub step output: ${output}"
        echo "${output}" >> $GITHUB_OUTPUT

        CRANE_MANIFEST_OUTPUT="$(crane manifest ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }})"
        if [[ "$(echo $CRANE_MANIFEST_OUTPUT | jq -r .mediaType)" == "application/vnd.oci.image.index.v1+json" ]]; then
          for combo in `echo $CRANE_MANIFEST_OUTPUT | jq -r '.manifests[] | .platform.architecture + .platform.variant + "_" + .digest'`; do
            arch="$(echo "${combo}" | cut -d "_" -f1)"
            digest="$(echo "${combo}" | cut -d "_" -f2)"
            output="digest-${arch}=ghcr.io/${{ github.repository }}@${digest}"
            echo "Adding GitHub step output: ${output}"
            echo "${output}" >> $GITHUB_OUTPUT
            output="shortdigest-${arch}=${digest}"
            echo "Adding GitHub step output: ${output}"
            echo "${output}" >> $GITHUB_OUTPUT
          done
        fi
    
    - name: Sign digests using cosign
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        function sign_digests {
          arch="${1}"
          digest="${2}"
          echo "Signing ${digest} (arch: ${arch}) ..."
          cosign sign --yes "${digest}" \
          --fulcio-url ${{ env.FULCIO_URL }}  --rekor-url ${{ env.REKOR_URL }} \
          -a sha=${{ github.sha }} \
          -a run_id=${{ github.run_id }} \
          -a run_attempt=${{ github.run_attempt }}
        }

        sign_digests "index" "${{ steps.extract.outputs.digest-index }}"

        [[ "${{ steps.extract.outputs.digest-amd64 }}" == "" ]] || sign_digests "amd64" "${{ steps.extract.outputs.digest-amd64 }}"
        [[ "${{ steps.extract.outputs.digest-arm64 }}" == "" ]] || sign_digests "arm64" "${{ steps.extract.outputs.digest-arm64 }}"
        [[ "${{ steps.extract.outputs.digest-386 }}" == "" ]] || sign_digests "386" "${{ steps.extract.outputs.digest-386 }}"
        [[ "${{ steps.extract.outputs.digest-armv6 }}" == "" ]] || sign_digests "armv6" "${{ steps.extract.outputs.digest-armv6 }}"
        [[ "${{ steps.extract.outputs.digest-armv7 }}" == "" ]] || sign_digests "armv7" "${{ steps.extract.outputs.digest-armv7 }}"
        [[ "${{ steps.extract.outputs.digest-ppc64le }}" == "" ]] || sign_digests "ppc64le" "${{ steps.extract.outputs.digest-ppc64le }}"
        [[ "${{ steps.extract.outputs.digest-riscv64 }}" == "" ]] || sign_digests "riscv64" "${{ steps.extract.outputs.digest-riscv64 }}"
        [[ "${{ steps.extract.outputs.digest-s390x }}" == "" ]] || sign_digests "s390x" "${{ steps.extract.outputs.digest-s390x }}"
