name: Build Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      packages: write
      contents: read
      security-events: write
    env:
      IMAGE_NAME: qbittorrent-distroless
      FULCIO_URL: "https://fulcio.sigstore.dev"
      REKOR_URL: "https://rekor.sigstore.dev"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

    - name: Set up Cosign
      uses: sigstore/cosign-installer@d7d6bc7722e3daa8354c50bcb52f4837da5e9b6a # v3.8.1

    - name: Setup goss
      uses: mlipscombe/goss-installation-action@a440e50e0ca070a5b84fc4b99a4e2bc7f9390201 # v1.2.2
      with:
        version: latest

    - name: Extract Version
      id: extract-version
      shell: bash
      run: |
        echo "VERSION=$(grep -oP '(?<=ARG VERSION=)[^ ]+' Dockerfile)" >> $GITHUB_ENV

    - name: Log in to GitHub Container Registry (GHCR)
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ghcr.io
        
    - name: Build and Push Docker Image
      uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
      id: build-and-push
      with:
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.url=https://ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          org.opencontainers.image.version=${{ env.VERSION_STRIPPED }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.vendor=${{ github.repository_owner }}
        platforms: linux/amd64
        file: Dockerfile
        context: .
        provenance: false
        sbom: false
        outputs: |
          type=docker
          ${{ format('type=image,name=ghcr.io/{0}/{1},push-by-digest=true,name-canonical=true,push=true', github.repository_owner, env.IMAGE_NAME) }}

    - name: Run goss
      env:
        CONTAINER_RUNTIME: docker
        GOSS_FILE: ./tests.yaml
        GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
        GOSS_SLEEP: 2
        GOSS_FILES_STRATEGY: cp
        CONTAINER_LOG_OUTPUT: goss_container_log_output
      run: |
        dgoss run ${{ steps.build-and-push.outputs.imageid }}

    - name: Determine Definitive Version
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      id: version
      with:
        script: |
          const semver = require('semver');

          function sanitizeInputVersion(version) {
              return version.split('-')[0]; // Remove any pre-release suffixes
          }

          const version = '${{ env.VERSION }}';
          const validSemverRegex = /^v?(\d+(\.\d+)?(\.\d+)?)/;
          const date = new Date();
          const parsedVersion = validSemverRegex.exec(version);
          const validSemver = parsedVersion !== null;

          const parsedSemver = validSemver ? semver.coerce(parsedVersion[0]) : null;
          const outputVersion = validSemver
              ? `${parsedSemver.major}.${parsedSemver.minor}.${parsedSemver.patch}`
              : `${date.getFullYear()}.${date.getMonth() + 1}.${date.getDate()}`;

          const sanitizedInputVersion = validSemver ? sanitizeInputVersion(version) : version;

          core.setOutput('version', outputVersion);
          core.setOutput('validSemver', validSemver);
          core.setOutput('sanitizedInputVersion', sanitizedInputVersion);

    - name: Build Meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
      id: meta
      with:
        flavor: latest=false
        images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.validSemver }}
          type=semver,pattern={{major}},value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.validSemver }}
          type=raw,value=${{ steps.version.outputs.sanitizedInputVersion }},enable=${{ steps.version.outputs.validSemver }}
          type=raw,value=rolling
    
    - name: Push Images
      uses: Noelware/docker-manifest-action@b33ab348026b120a895167160f5605b0197f0862 # 0.4.3
      id: push
      with:
        inputs: ${{ join(fromJSON(steps.meta.outputs.json).tags, ',') }}
        images: >-
          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }},
        push: true

    - name: Export Digest
      id: digest
      run: |
        digest=$(echo "${{ steps.push.outputs.images }}" | grep -oP 'sha256:[^, ]+' | head -n1)
        echo "digest=${digest}" >> $GITHUB_OUTPUT

    - name: Sign the image
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        cosign sign --yes ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }} \
          --fulcio-url ${{ env.FULCIO_URL }}  --rekor-url ${{ env.REKOR_URL }} \
          -a sha=${{ github.sha }} \
          -a run_id=${{ github.run_id }} \
          -a run_attempt=${{ github.run_attempt }}

    - name: Generate SBOM
      uses: anchore/sbom-action@f325610c9f50a54015d37c8d16cb3b0e2c8f4de0 # v0.18.0
      with:
        format: spdx-json
        image: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}
        output-file: ${{ env.IMAGE_NAME }}-sbom.spdx.json

    - name: Scan SBOM
      uses: anchore/scan-action@7c05671ae9be166aeb155bad2d7df9121823df32 # v6.1.0
      id: scan
      with:
        cache-db: true
        fail-build: false
        sbom: ${{ env.IMAGE_NAME }}-sbom.spdx.json

    - name: Attest SBOM
      shell: bash
      run: |
        cosign attest --yes --type spdxjson \
         --predicate ${{ env.IMAGE_NAME }}-sbom.spdx.json \
         ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}

    - name: 'SLSA: Generate provenance and attest'
      shell: bash
      env:
        COSIGN_EXPERIMENTAL: "true"
        GENERATOR_REPOSITORY: slsa-framework/slsa-github-generator
        GENERATOR_RELEASE_TAG: v2.0.0
        GENERATOR_RELEASE_BINARY: slsa-generator-container-linux-amd64
        GENERATOR_RELEASE_BINARY_SHA256: 5f293677eb3433328140c547232a760c0aa513a049c2d2f4557fefe686acdcf8
        GH_TOKEN: "${{ github.token }}"
        GITHUB_CONTEXT: "${{ toJSON(github) }}" # Needed by slsa-generator-container
      run: |
        set -x
      
        gh release -R "${GENERATOR_REPOSITORY}" download "${GENERATOR_RELEASE_TAG}" -p "${GENERATOR_RELEASE_BINARY}"
        COMPUTED_HASH="$(sha256sum "${GENERATOR_RELEASE_BINARY}" | awk '{print $1}')"
        if [[ "${COMPUTED_HASH}" != "${GENERATOR_RELEASE_BINARY_SHA256}" ]]; then
          echo "Mismatched checksums (wanted ${GENERATOR_RELEASE_BINARY_SHA256} got ${COMPUTED_HASH}). Exiting."
          exit 1
        fi
        chmod +x "${GENERATOR_RELEASE_BINARY}"

        trap "rm -f provenance.json" EXIT
        echo "Generating SLSA build provenance ..."
        "./${GENERATOR_RELEASE_BINARY}" generate --predicate="provenance.json"
        echo "Provenance doc:"
        cat provenance.json | jq

        echo "Attaching SLSA build provenance to ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}"
        cosign attest --yes --type slsaprovenance \
         --predicate="provenance.json" \
         ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.digest.outputs.digest }}

    - name: Upload SARIF Report
      uses: github/codeql-action/upload-sarif@6bb031afdd8eb862ea3fc1848194185e076637e5 # v3.28.11
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
